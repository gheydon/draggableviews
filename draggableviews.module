<?php

/**
 * @file
 * Contains draggableviews.module.
 */

/**
 * Implements hook_views_data_alter().
 */
function draggableviews_views_data_alter(&$data) {

  $data['draggableviews_structure']['weight'] = array(
    'title' => t('Weight'),
    'group' => t('Draggableviews'),
    'help' => t('Display the weight value.'),
    'field' => array(
      'id' => 'numeric',
    ),
    'sort' => array(
      'id' => 'standard',
    ),
    'filter' => array(
      'help' => t('Filter by the draggableviews weight value (Native handler only).'),
      'id' => 'numeric',
    ),
  );
  $data['draggableviews_structure']['parent'] = array(
    'title' => t('Parent'),
    'help' => t('The parent entity id.'),
    'group' => t('Draggableviews'),
    'field' => array(
      'id' => 'numeric',
    ),
    'filter' => array(
      'help' => t('Filter by the draggableviews parent\'s entity id (Native handler only).'),
      'id' => 'numeric',
    ),
  );

  foreach (\Drupal::entityManager()->getDefinitions() as $entity_type_id => $entity_type) {
    $base_table = $entity_type->getDataTable() ?: $entity_type->getBaseTable();
    $entity_keys = $entity_type->getKeys();
    if ($base_table && isset($data[$base_table]['table'])) {
      $data[$base_table]['draggableviews'] = array(
        'title' => $data[$base_table]['table']['group'],
        'group' => t('Draggableviews'),
        'help' => t('Provide a draggable functionality.'),
        'entity field' => $entity_keys['id'],
        'field' => array(
          'id' => 'draggable_views_field',
          'click sortable' => FALSE,
        ),
      );
      // Explain to every entity how to join with draggableviews structure table.
      $data['draggableviews_structure']['table']['join'][$base_table] = array(
        'handler' => 'draggableviews_join_handler',
        // Because this is a direct link it could be left out.
        'left_table' => $base_table,
        'left_field' => $entity_keys['id'],
        'field' => 'entity_id',
      );
    }
  }
}

/**
 * Implements hook_views_post_render().
 */
function draggableviews_views_post_render(\Drupal\views\ViewExecutable $view, &$output, \Drupal\views\Plugin\views\cache\CachePluginBase $cache) {
  // If this view is not the sort view, then stop here.
  if (!isset($view->field['draggableviews'])) {
    return;
  }

  // Add JavaScript for auto-save functionality.
  if ($view->field['draggableviews']->displayHandler->usesAJAX()) {
    $output['#attached']['library'][] = 'draggableviews/draggableviews_table';
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function draggableviews_preprocess_views_view_table(&$variables) {
  $view = $variables['view'];
  if (!isset($view->field['draggableviews'])) {
    return;
  }

  $result = $variables['view']->result;

  // Get an index of the row by base field.
  $get_index = function($id) use ($result) {
    foreach ($result as $item) {
      if ($item->nid == $id) {
        return $item->index;
      }
    }
    return FALSE;
  };

  // Get a depth of the row.
  $get_depth = function($index) use ($result, $get_index, &$get_depth) {
    if (!isset($result[$index])) {
      return FALSE;
    }
    $row = $result[$index];
    // If parent is available, set parent's depth +1.
    return (!empty($row->draggableviews_structure_parent)) ? $get_depth($get_index($row->draggableviews_structure_parent)) + 1 : 0;
  };

  foreach ($variables['rows'] as $key => $row) {
    $title = $row['columns']['title']['content'][0]['field_output']['#markup'];
    $indent = [
      '#theme' => 'indentation',
      '#size' => $get_depth($key),
    ];
    $variables['rows'][$key]['columns']['title']['content'][0]['field_output']['#markup'] = render($indent) . $title;
  }

}
